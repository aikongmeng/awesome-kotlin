/*
 * This file is generated by jOOQ.
 */
package jooq.main.tables


import java.time.OffsetDateTime

import jooq.main.Public
import jooq.main.keys.BOOKMARK_PKEY
import jooq.main.tables.records.BookmarkRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Bookmark(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BookmarkRecord>?,
    parentPath: InverseForeignKey<out Record, BookmarkRecord>?,
    aliased: Table<BookmarkRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BookmarkRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.bookmark</code>
         */
        val BOOKMARK: Bookmark = Bookmark()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookmarkRecord> = BookmarkRecord::class.java

    /**
     * The column <code>public.bookmark.id</code>.
     */
    val ID: TableField<BookmarkRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.bookmark.title</code>.
     */
    val TITLE: TableField<BookmarkRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(500).nullable(false), this, "")

    /**
     * The column <code>public.bookmark.description</code>.
     */
    val DESCRIPTION: TableField<BookmarkRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bookmark.language</code>.
     */
    val LANGUAGE: TableField<BookmarkRecord, String?> = createField(DSL.name("language"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.bookmark.url</code>.
     */
    val URL: TableField<BookmarkRecord, String?> = createField(DSL.name("url"), SQLDataType.VARCHAR(500).nullable(false), this, "")

    /**
     * The column <code>public.bookmark.thumbnail</code>.
     */
    val THUMBNAIL: TableField<BookmarkRecord, String?> = createField(DSL.name("thumbnail"), SQLDataType.VARCHAR(500), this, "")

    /**
     * The column <code>public.bookmark.created</code>.
     */
    val CREATED: TableField<BookmarkRecord, OffsetDateTime?> = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    /**
     * The column <code>public.bookmark.updated</code>.
     */
    val UPDATED: TableField<BookmarkRecord, OffsetDateTime?> = createField(DSL.name("updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BookmarkRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BookmarkRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BookmarkRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.bookmark</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.bookmark</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.bookmark</code> table reference
     */
    constructor(): this(DSL.name("bookmark"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<BookmarkRecord, Long?> = super.getIdentity() as Identity<BookmarkRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<BookmarkRecord> = BOOKMARK_PKEY
    override fun `as`(alias: String): Bookmark = Bookmark(DSL.name(alias), this)
    override fun `as`(alias: Name): Bookmark = Bookmark(alias, this)
    override fun `as`(alias: Table<*>): Bookmark = Bookmark(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Bookmark = Bookmark(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Bookmark = Bookmark(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Bookmark = Bookmark(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Bookmark = Bookmark(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Bookmark = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Bookmark = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Bookmark = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Bookmark = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Bookmark = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Bookmark = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Bookmark = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Bookmark = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Bookmark = where(DSL.notExists(select))
}
