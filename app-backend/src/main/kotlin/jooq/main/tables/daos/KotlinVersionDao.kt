/*
 * This file is generated by jOOQ.
 */
package jooq.main.tables.daos


import java.time.OffsetDateTime

import jooq.main.tables.KotlinVersion
import jooq.main.tables.records.KotlinVersionRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KotlinVersionDao(configuration: Configuration?) : DAOImpl<KotlinVersionRecord, jooq.main.tables.pojos.KotlinVersion, Long>(KotlinVersion.KOTLIN_VERSION, jooq.main.tables.pojos.KotlinVersion::class.java, configuration) {

    /**
     * Create a new KotlinVersionDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.main.tables.pojos.KotlinVersion): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.main.tables.pojos.KotlinVersion> = fetchRange(KotlinVersion.KOTLIN_VERSION.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<jooq.main.tables.pojos.KotlinVersion> = fetch(KotlinVersion.KOTLIN_VERSION.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): jooq.main.tables.pojos.KotlinVersion? = fetchOne(KotlinVersion.KOTLIN_VERSION.ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTitle(lowerInclusive: String?, upperInclusive: String?): List<jooq.main.tables.pojos.KotlinVersion> = fetchRange(KotlinVersion.KOTLIN_VERSION.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByTitle(vararg values: String): List<jooq.main.tables.pojos.KotlinVersion> = fetch(KotlinVersion.KOTLIN_VERSION.TITLE, *values)

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreated(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<jooq.main.tables.pojos.KotlinVersion> = fetchRange(KotlinVersion.KOTLIN_VERSION.CREATED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    fun fetchByCreated(vararg values: OffsetDateTime): List<jooq.main.tables.pojos.KotlinVersion> = fetch(KotlinVersion.KOTLIN_VERSION.CREATED, *values)
}
